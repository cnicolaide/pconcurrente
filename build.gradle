apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: "de.aaschmid.cpd"
apply plugin: 'findbugs'
apply plugin: "jacoco"
apply plugin: "wrapper"

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "de.aaschmid:gradle-cpd-plugin:1.0"
  }
}

task compilarMain(type: Jar) {
	manifest {
        attributes 'Main-Class': 'MinaCarbon.Main'
    }
    baseName = 'Main'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task compilarMain2(type: Jar) {
	manifest {
        attributes 'Main-Class': 'MinaCarbon.Main2'
    }
    baseName = 'Main2'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

repositories {
    mavenCentral()
}

dependencies {
	compile group: 'junit', name: 'junit', version: '4.12'
	compile group: 'org.jsoup', name: 'jsoup', version: '1.8.3'
	compile group: 'net.sourceforge.jexcelapi', name: 'jxl', version: '2.6.10'
	compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
}

checkstyle {
    ignoreFailures = true
    toolVersion = '6.4.1'
    sourceSets = [sourceSets.main]
    configFile = rootProject.file("config/checkstyle/checkstyle.xml");
    showViolations = true
}

checkstyleTest {
    enabled = false
}

pmd {
    ignoreFailures = true
}

cpd {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)

task compilarTodo() {
compilarTodo.dependsOn(compilarMain)
compilarTodo.dependsOn(compilarMain2)
}